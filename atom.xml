<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jenkinsxu.github.io</id>
    <title>Jenkins&apos; Secret Base</title>
    <updated>2020-01-02T04:22:55.200Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jenkinsxu.github.io"/>
    <link rel="self" href="https://jenkinsxu.github.io/atom.xml"/>
    <subtitle>ÔΩÑ(ÔΩ•‚àÄÔΩ•*)‚ô™ÔæüYou found my secret base! 

ÔºàÊõ¥Â§öÂÖ≥‰∫éÊàëÂ∞±Âú® About Ê†áÁ≠æ‰∏≠Ôºâ</subtitle>
    <logo>https://jenkinsxu.github.io/images/avatar.png</logo>
    <icon>https://jenkinsxu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jenkins&apos; Secret Base</rights>
    <entry>
        <title type="html"><![CDATA[Day 03 - Getting Started with App Development Part 3]]></title>
        <id>https://jenkinsxu.github.io/post/day-03-getting-started-with-app-development-part-3</id>
        <link href="https://jenkinsxu.github.io/post/day-03-getting-started-with-app-development-part-3">
        </link>
        <updated>2019-12-28T19:25:02.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Swift booleans have a method, **toggle() **</li>
<li>Command-Shift-L to view library</li>
</ul>
<h3 id="setting-background-color">Setting background color</h3>
<pre><code class="language-swift">view.backgroundColor = .white
</code></pre>
<ul>
<li>UIControl.State represents the different potential states of a button (a data type?)</li>
</ul>
<h3 id="a-normal-button">A &quot;normal&quot; button</h3>
<pre><code class="language-swift">static var normal: UIControl.State //Define a normal constant corresponding to the state of the button when it's enabled and sitting idle on the screen
</code></pre>
<h3 id="changing-a-title">Changing a title</h3>
<pre><code class="language-swift">lightButton.setTitle(&quot;Off&quot;, for: .normal)
</code></pre>
<h3 id="clear-out-unused-outlets-with-connection-panel">Clear out unused outlets with connection panel</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 04 - Introduction to UIKit Part 1]]></title>
        <id>https://jenkinsxu.github.io/post/day-04-introduction-to-uikit-part-1</id>
        <link href="https://jenkinsxu.github.io/post/day-04-introduction-to-uikit-part-1">
        </link>
        <updated>2019-12-28T09:56:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="21-strings">2.1 Strings</h2>
<h3 id="string-literals">String Literals</h3>
<pre><code class="language-swift">&quot;Hello Michelle!&quot;
</code></pre>
<p>If your string literal needs to be multiple lines, simply surround your set of characters with three double quotation marks &quot;&quot;&quot;</p>
<pre><code class="language-swift">let joke = &quot;&quot;&quot;
    Q: why did the chicken cross the road?
    A: To get to the other side! 
    &quot;&quot;&quot;
</code></pre>
<p>Escape character</p>
<pre><code class="language-swift">let greeting = &quot;It is traditional in programming to print \&quot;Hello, world\&quot;&quot;
</code></pre>
<ul>
<li>Double quote <strong>&quot;</strong></li>
<li>Single quote **' **</li>
<li>Backslash <strong>\</strong></li>
<li>Tap <strong>\t</strong></li>
<li>Carriage return <strong>\r</strong></li>
</ul>
<h3 id="check-if-a-swift-string-is-empty-using-the-boolean-property">Check if a Swift String is empty using the Boolean <strong>property</strong></h3>
<pre><code class="language-swift">var myString = &quot;&quot;
if myString.isEmpty {
    print(&quot;The string is empty&quot;)
}
</code></pre>
<h3 id="concatenation-k…ônÀåk√¶t…ôÀàne…™ Én">Concatenation [k…ônÀåk√¶t…ôÀàne…™ Én]</h3>
<pre><code class="language-swift">let myString = string1 + string2
</code></pre>
<h3 id="string-interpolation-…™nÀåt…úÀêrp…ôÀàle…™ Én">String Interpolation […™nÀåt…úÀêrp…ôÀàle…™ Én]</h3>
<pre><code class="language-swift">print(&quot;If a is \(a) and b is \(b), then a + b equals \(a+b)&quot;) 
</code></pre>
<h3 id="useful-methods-of-the-string-type">Useful methods of the String type</h3>
<ul>
<li>.lowercased()</li>
<li>.hasPrefix(_üòÉ</li>
</ul>
<pre><code class="language-swift">let gretting = &quot;Hello, world!&quot;
gretting.hasPrefix(&quot;Hello&quot;)
</code></pre>
<ul>
<li>.hasSuffix(_üòÉ</li>
<li>.contains(_üòÉ</li>
<li>.index(before: ) //Returns the position immediately before the given index.</li>
<li>.index(after: )</li>
<li>index(_:offsetBy:)</li>
</ul>
<pre><code class="language-swift">let s = &quot;Swift&quot;
let i = s.index(s.startIndex, offsetBy: 4)
print(s[i])
// Prints &quot;t&quot;
</code></pre>
<ul>
<li>insert(contentsOf:at:)</li>
<li>remove(at:)</li>
<li>removeSubrange(_üòÉ</li>
<li>replaceSubrange(_:, with:)</li>
</ul>
<h3 id="useful-properties-of-the-string-type">Useful properties of the String type</h3>
<ul>
<li>.count</li>
<li>.startIndex //The position of the first character in a nonempty string.</li>
<li>.endIndex</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 02 - Getting Started with App Development Part 2]]></title>
        <id>https://jenkinsxu.github.io/post/day-02-getting-started-with-app-development</id>
        <link href="https://jenkinsxu.github.io/post/day-02-getting-started-with-app-development">
        </link>
        <updated>2019-12-27T06:48:55.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>Assistant editor <img src="https://jenkinsxu.github.io/post-images/1577775101967.png" alt="" loading="lazy"> - to view the storyboard and the definition at the same time.</li>
<li>The <strong>Custom Class</strong> is set to be ViewConrtoller by default. But the ViewController class <strong>still doesn‚Äôt have access</strong> to the button you added. To make the object <strong>accessible in code</strong>, you‚Äôll need to <strong>create an outlet</strong>.</li>
</ul>
<h3 id="outlets-and-actions">Outlets and Actions</h3>
<ul>
<li>Outlets - reference <strong>visual elements</strong> from Interface Builder to code
<ul>
<li><strong>Creating Outlet</strong>: <strong>Right-click and drag</strong> toward the assistant editor pane, which contains the ViewController class definition. Connection is set to <strong>Outlet</strong> and Storage is set to <strong>Strong</strong>. In the name field, specify a variable name for the button: ‚ÄúmyButton‚Äù.</li>
</ul>
</li>
</ul>
<pre><code class="language-swift">import UIKit

class ViewController: UIViewController {
</code></pre>
<pre><code class="language-swift">‚ö´Ô∏è	@IBOutlet var myButton: UIButton!
//Circle - The filled circle indicates that the outlet is connected. 
//@IBOutlet - Unique to Interface Builder, this keyword specifies a relationship between the variable and a storyboard. Without the @IBOutlet keyword, the circle doesn‚Äôt display. 
//: UIButton! - The type of the property is a UIButton, the button type within the UIKit framework (import UIKit). The exclamation point warns you that the program will crash if you try to access this property *and* the outlet isn‚Äôt connected. 
</code></pre>
<pre><code class="language-swift">		override func viewDidLoad() { // gives you access to the view controller's main view property before it is displayed on the screen - good for setting up
			super.viewDidLoad()
			// Do any additional setup after loading the view
			myButton.setTitleColor(.red, for: .normal) //changes the color of the button
		}
</code></pre>
<ul>
<li>Actions - a reference to <strong>a piece of code that will execute when the interaction takes place</strong>
<ul>
<li>Connection is set to <strong>Action</strong></li>
</ul>
</li>
</ul>
<pre><code class="language-swift">‚ö´Ô∏è	@IBAction func buttonPressed(_ sender: Any) {

		}
//Circle - The filled circle indicates that the action is connected. 
//@IBOutlet - Unique to Interface Builder, this keyword specifies a relationship between an action and an object in a storyboard. 
//(_ sender: Any) - An action can be connected to a number of different objects: buttons, sliders, switches, etc. In this example, sender is the name of the *object* that triggers the action. Because sender could represent any of several user interface elements, it‚Äôs of the Any type. 
</code></pre>
<h3 id="companion-property">Companion property</h3>
<p><img src="https://jenkinsxu.github.io/post-images/1577775126509.png" alt="" loading="lazy"><br>
Many objects that you can configure in Interface Builder have properties that can only be set programmatically.<br>
* Do so programmatically by setting up an IBOutlet and updating the properties using dot notation.</p>
<pre><code class="language-swift">scrollView.contentSize = CGSize(width: 100, height: 100)
</code></pre>
<h3 id="setting-up-all-child-views-and-adding-them-to-the-screen">Setting up all child views and adding them to the screen</h3>
<pre><code class="language-swift">let label = UILabel(frame: CGRect(x: 16, y: 16, width: 200, height: 44))
view.addSubview(label) // Adds label as a child view to 'view'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 01 - Getting Started with App Development Part 1]]></title>
        <id>https://jenkinsxu.github.io/post/day-01-getting-started-with-app-development-part-1</id>
        <link href="https://jenkinsxu.github.io/post/day-01-getting-started-with-app-development-part-1">
        </link>
        <updated>2019-12-25T20:17:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="12-constants-variables-and-data-types">1.2 Constants, variables and data types</h2>
<ul>
<li>Type <strong>:quit</strong> and press Enter to exit the <strong>Swift REPL</strong>.</li>
<li>One of type inference or type annotation must be done when creating a variable / constant.</li>
<li>Use <strong>option click</strong> to check data types</li>
</ul>
<h3 id="type-inference">Type Inference</h3>
<pre><code class="language-swift">let name = ‚ÄúJohn‚Äù //names can‚Äôt begin with a number
</code></pre>
<h3 id="type-definition">Type Definition</h3>
<pre><code class="language-swift">struct Person { //The first letter needs to be capitalized
	//two properties
	let firstName:String //Type annotation
	let lastName :String

	func sayHello() {
		print(‚ÄúHello there! My name is \(firstName) \(lastName).‚Äù)
	}
}

//creating an instance
let aPerson = Person(firstName: ‚ÄúJacob‚Äù, lastName: ‚ÄùEdwards‚Äù)
</code></pre>
<h3 id="increasing-readability-of-long-numbers">Increasing readability of long numbers</h3>
<pre><code class="language-swift">largePrettyNumber = 1_000_000_000
</code></pre>
<h2 id="13-operators">1.3 Operators</h2>
<ul>
<li>When you use the division operator <strong>/</strong> on <strong>Int values</strong>, the result will be an Int value <strong>rounded down</strong> to the nearest whole number. (Only the integer property got stored.)</li>
</ul>
<h3 id="creating-a-new-value-of-other-types-by-prefixing">Creating a <em>new</em> value of other types by prefixing</h3>
<pre><code class="language-swift">let pi = Double(3) + 0.1415927
</code></pre>
<h3 id="referencing-the-current-variable"><em>Referencing</em> the current variable</h3>
<pre><code class="language-swift">myScore += 3 //compound assignment operators
</code></pre>
<h2 id="14-control-flow">1.4 Control Flow</h2>
<ul>
<li>closed interval: 1.2‚Ä¶5.0</li>
<li>open interval: 1.2..&lt;5.0</li>
</ul>
<h3 id="coding-style-in-if-else-statements">Coding style in if-else statements</h3>
<pre><code class="language-swift">let temperature = 100
if temperature &gt;= 100 { //no brackets needed here
	print(‚ÄúThe water is boiling.‚Äù)
} else { //write it in the same line
	print(‚Äú‚ÄùThe water is not boiling. )
}
</code></pre>
<h3 id="switch-statement">Switch statement</h3>
<pre><code class="language-swift">let character = ‚Äúz‚Äù
switch character {
	case ‚Äúa‚Äù, ‚Äúe‚Äù, ‚Äúi‚Äù, ‚Äúo‚Äù, ‚Äúu‚Äù:
		print(‚ÄúThis character is a vowel.‚Äù)
	//provide a default case
	default:
		print(‚ÄúThis character is not a vowel.‚Äù) 
}

let distance = 100
switch distance {
	case 0‚Ä¶9: //inclusive
		print(‚ÄúYour destination is close.‚Äù)
	case 10‚Ä¶99:
		print(‚ÄúYour destination is medium distance from here.‚Äù)
	case 100‚Ä¶999:
		print(‚ÄúYour destination is far from here.‚Äù)
	//provide a default case
	default:
		print(‚ÄúAre you sure you want to travel this far?‚Äù) 
}
</code></pre>
<h2 id="15-xcode">1.5 Xcode</h2>
<ul>
<li>All <strong>.storyboard</strong> files are unique to <strong>Interface Builder</strong>. They contain information about the design of each <strong>scene</strong> within your application.</li>
<li>The <strong>.xcassets</strong> file makes it easy to <strong>maintain all your assets</strong>, without needing to work with individual icons and images.</li>
<li>The <strong>Info.plist</strong> file contains a list of <strong>properties and settings</strong> for your app.</li>
</ul>
<h3 id="xcode-interface">Xcode Interface</h3>
<figure data-type="image" tabindex="1"><img src="https://jenkinsxu.github.io/post-images/1577660369776.png" alt="" loading="lazy"></figure>
<h3 id="deployment-info">Deployment Info</h3>
<p><img src="https://jenkinsxu.github.io/post-images/1577660391882.png" alt="" loading="lazy"><br>
The entry in Main Interface defines which storyboard file will be loaded first when the app launches.</p>
<h2 id="16-building-running-and-debugging-an-app">1.6 Building, Running, and Debugging an App</h2>
<ul>
<li>To <strong>rotate the image</strong> from portrait to landscape orientation, use the keyboard shortcuts <strong>Command-Left</strong> and <strong>Command-Right</strong>.</li>
<li>You can use keyboard shortcuts, from <strong>Command-1 to Command-3</strong>, to <strong>scale the device image</strong> up or down.</li>
<li>If you try to use Simulator to test an interaction with the Camera app, the program will crash.</li>
<li>The MessageUI framework is incompatible with Simulator.</li>
</ul>
<h3 id="scheme-menu">Scheme menu</h3>
<figure data-type="image" tabindex="2"><img src="https://jenkinsxu.github.io/post-images/1577660405930.png" alt="" loading="lazy"></figure>
<h3 id="types-of-issue">Types of issue</h3>
<ol>
<li>Warnings ‚ö†Ô∏è</li>
<li>Compiler Errors ‚ùå</li>
<li>Bugs</li>
</ol>
<h3 id="using-breakpoints-and-step-controls">Using breakpoints and step controls</h3>
<p><img src="https://jenkinsxu.github.io/post-images/1577660418345.png" alt="" loading="lazy"><br>
Since the breakpointed line hasn‚Äôt yet been executed, names contains no values. (Not inclusive.)</p>
<figure data-type="image" tabindex="3"><img src="https://jenkinsxu.github.io/post-images/1577660427843.png" alt="" loading="lazy"></figure>
<ul>
<li><strong>Continue</strong> - Resumes code execution <strong>until the next breakpoint is reached</strong>.</li>
<li><strong>Step over</strong> - Executes the selected line and pauses execution <strong>on the next line.</strong></li>
<li><strong>Step into</strong> - If clicked on a line with a function call, advances <strong>to the first line of the function</strong>, then pauses execution again.</li>
<li><strong>Step out</strong> - Executes all remaining lines in the function call and pauses execution <strong>on the line after the function</strong>.</li>
</ul>
<h2 id="17-documentation">1.7 Documentation</h2>
<ul>
<li>Documentation call a view that‚Äôs embedded in another view <strong>subviews</strong>.</li>
<li>Documentation call the parent view that‚Äôs embedding the other view <strong>superviews</strong>.</li>
<li>The <strong>frame</strong> property defines the origin and dimensions of the view in the coordinate system of its superview.</li>
<li>The <strong>bounds</strong> property defines the internal dimensions of the view as it sees them and is used almost <strong>exclusively in custom drawing code</strong>.</li>
</ul>
<h3 id="three-of-the-primary-responsibilities-of-a-uiview-object">Three of the primary responsibilities of a UIView object</h3>
<ul>
<li>Drawing and animation</li>
<li>Layout and subview management</li>
<li>Event handling</li>
</ul>
<h3 id="the-quick-help-feature">The Quick Help Feature</h3>
<p><img src="https://jenkinsxu.github.io/post-images/1577660441907.png" alt="" loading="lazy"><br>
<strong>Option-click</strong> a method name, then Xcode will displays a popover with a brief description of the function and the OS versions that support it.</p>
<h3 id="xcode-help">Xcode Help</h3>
<p><img src="https://jenkinsxu.github.io/post-images/1577660451173.png" alt="" loading="lazy"><br>
<strong>Command-Shift-O</strong></p>
<h2 id="interface-builder-basics">Interface Builder Basics</h2>
<ul>
<li>Interface Builder opens whenever you select an <strong>.xib</strong> file or a <strong>.storyboard</strong> file from the project navigator.</li>
<li>An XIB file contains t user interface for a single visual element, such as a full-screen view a table view cell or a custom UI control.</li>
<li>A storyboard file includes many pieces of the interface, defining the layout of <strong>one or many screens</strong> as well as <strong>the progression from one screen to another</strong>.</li>
<li>The single scene with a plain white view on an otherwise blank canvas is called the <strong>initial view controller</strong>.  (Can be changed by moving the <strong>entry point</strong>.)</li>
<li>Select the Library button <img src="https://jenkinsxu.github.io/post-images/1577660466003.png" alt="" loading="lazy"> in the toolbar to display the Object Library.</li>
</ul>
<h3 id="document-outline-view">Document Outline View</h3>
<figure data-type="image" tabindex="4"><img src="https://jenkinsxu.github.io/post-images/1577660475918.png" alt="" loading="lazy"></figure>
<h3 id="context-sensitive-inspectors">Context-sensitive Inspectors</h3>
<ul>
<li>The <strong>Identity inspector</strong> <img src="https://jenkinsxu.github.io/post-images/1577660488900.png" alt="" loading="lazy"> allows you to edit the <strong>properties related to an object‚Äôs identity</strong>, such as what class it belongs to.</li>
<li>The <strong>Attributes inspector</strong> <img src="https://jenkinsxu.github.io/post-images/1577660499132.png" alt="" loading="lazy"> provides a list of <strong>adjustable visual properties</strong> for the selected item.</li>
<li>The <strong>Size inspector</strong>  <img src="https://jenkinsxu.github.io/post-images/1577660509414.png" alt="" loading="lazy"> allows you to adjust the <strong>size and position</strong> of the selected element within the scene. You will use the X and Y fields - where the <strong>top left</strong> of the screen corresponds to (0, 0) - to change the position.</li>
<li>The <strong>Connections inspector</strong> <img src="https://jenkinsxu.github.io/post-images/1577660519829.png" alt="" loading="lazy"> lists <strong>all the functions and variable names related to the object</strong>.</li>
</ul>
]]></content>
    </entry>
</feed>